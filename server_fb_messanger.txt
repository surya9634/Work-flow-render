
/**
 * FB Messenger Automation Backend (Node.js + Express + Socket.IO)
 * ---------------------------------------------------------------
 * Features:
 * - Facebook OAuth login
 * - List managed Pages & select one
 * - Auto-subscribe selected Page to Messenger webhooks
 * - Fetch conversations and historical messages
 * - Send messages to PSID
 * - Receive real-time messages via webhook and push to clients (Socket.IO)
 * - Optional: simple autoresponder hook
 *
 * Quick start:
 *   npm i express express-session passport passport-facebook axios socket.io cors body-parser dotenv
 *   node server.js
 *
 * Required env:
 *   FACEBOOK_APP_ID=...
 *   FACEBOOK_APP_SECRET=...
 *   FACEBOOK_CALLBACK=https://YOUR_DOMAIN/auth/facebook/callback
 *   WEBHOOK_VERIFY_TOKEN=YOUR_VERIFY_TOKEN
 *   SESSION_SECRET=anystring
 *   PORT=10000
 */

require('dotenv').config();
const express = require('express');
const session = require('express-session');
const passport = require('passport');
const FacebookStrategy = require('passport-facebook').Strategy;
const axios = require('axios');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*"} });

// ---- Config ----
const CFG = {
  FB_APP_ID: process.env.FACEBOOK_APP_ID,
  FB_APP_SECRET: process.env.FACEBOOK_APP_SECRET,
  FB_CALLBACK: process.env.FACEBOOK_CALLBACK,
  WEBHOOK_VERIFY_TOKEN: process.env.WEBHOOK_VERIFY_TOKEN || 'VERIFY_TOKEN',
  PORT: Number(process.env.PORT || 10000),
  SESSION_SECRET: process.env.SESSION_SECRET || 'session_secret'
};

if (!CFG.FB_APP_ID || !CFG.FB_APP_SECRET || !CFG.FB_CALLBACK) {
  console.warn('[WARN] Missing Facebook app env (FACEBOOK_*). OAuth will fail until set.');
}

// ---- Middleware ----
app.use(cors());
app.use(express.json({ limit: '1mb' }));
app.use(bodyParser.urlencoded({ extended: true }));

app.use(session({
  secret: CFG.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: { secure: false, maxAge: 7 * 24 * 60 * 60 * 1000 } // 7 days
}));

app.use(passport.initialize());
app.use(passport.session());

passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));

passport.use(new FacebookStrategy({
  clientID: CFG.FB_APP_ID,
  clientSecret: CFG.FB_APP_SECRET,
  callbackURL: CFG.FB_CALLBACK,
  profileFields: ['id', 'displayName', 'emails', 'name'],
  enableProof: true,
  graphAPIVersion: 'v23.0'
}, (accessToken, refreshToken, profile, done) => {
  profile.accessToken = accessToken;
  return done(null, profile);
}));

// ---- In-memory store (replace with DB in prod) ----
/**
 * users[uid] = {
 *   fbAccessToken,
 *   profile,
 *   pages: [{id, name, access_token}],
 *   page: { id, name, access_token }  // selected
 * }
 */
const users = Object.create(null);

function requireLogin(req, res, next) {
  if (req.isAuthenticated()) return next();
  return res.status(401).json({ error: 'not_authenticated' });
}

// ---- Auth ----
app.get('/auth/facebook',
  passport.authenticate('facebook', {
    scope: [
      'email',
      'public_profile',
      'pages_show_list',
      'pages_manage_metadata',
      'pages_read_engagement',
      'pages_messaging'
    ]
  })
);

app.get('/auth/facebook/callback',
  passport.authenticate('facebook', { failureRedirect: '/login-failed' }),
  async (req, res) => {
    try {
      const uid = String(req.user.id);
      const fbAccessToken = req.user.accessToken;

      // Load managed pages
      const pagesResp = await axios.get('https://graph.facebook.com/v23.0/me/accounts', {
        params: { access_token: fbAccessToken }
      });
      const pages = (pagesResp.data?.data || []).map(p => ({
        id: p.id, name: p.name, access_token: p.access_token
      }));

      users[uid] = {
        fbAccessToken,
        profile: req.user,
        pages,
        page: null
      };

      res.redirect(`/dashboard?uid=${uid}`);
    } catch (err) {
      console.error('OAuth callback error:', err?.response?.data || err.message);
      res.redirect('/login-failed');
    }
  }
);

app.get('/login-failed', (_req, res) => res.status(401).send('Facebook login failed'));

// ---- Minimal UI (optional) ----
app.get('/dashboard', (req, res) => {
  const uid = req.query.uid || (req.user && req.user.id) || '';
  res.send(`
    <!doctype html>
    <html><head><meta charset="utf-8"><title>Messenger Dashboard</title>
    <style>
      body{font-family:system-ui;margin:0;background:#0b1020;color:#e6e6f0}
      header{padding:16px 20px;background:#101935;font-weight:700}
      .grid{display:grid;grid-template-columns:300px 1fr;height:calc(100vh - 56px)}
      .side{background:#11172d;padding:12px;border-right:1px solid #1e2a55}
      .main{padding:12px}
      .card{background:#0f1530;border:1px solid #24316a;border-radius:14px;padding:12px;margin:10px 0}
      .list{max-height:42vh;overflow:auto;border:1px solid #1e2a55;border-radius:10px}
      .item{padding:10px 12px;border-bottom:1px solid #1e2a55;cursor:pointer}
      .item:hover{background:#141b3b}
      .bubble{display:inline-block;padding:10px 12px;border-radius:12px;margin:6px 0;max-width:70%}
      .me{background:#133e7c}
      .them{background:#2c2e3f}
      input,button{padding:10px;border-radius:8px;border:1px solid #1e2a55;background:#0c1229;color:#e6e6f0}
      button{cursor:pointer}
    </style>
    </head>
    <body>
      <header>Messenger</header>
      <div class="grid">
        <aside class="side">
          <div class="card">
            <div style="display:grid;gap:8px">
              <input id="uid" placeholder="User ID" value="${uid}" />
              <button onclick="loadPages()">Load Pages</button>
            </div>
            <div id="pages" class="list" style="margin-top:8px"></div>
          </div>
          <div class="card">
            <div>Conversations</div>
            <div id="convos" class="list" style="margin-top:8px"></div>
          </div>
        </aside>
        <main class="main">
          <div id="messages" class="card" style="height:60vh;overflow:auto"></div>
          <div class="card" style="display:grid;grid-template-columns:1fr auto;gap:8px">
            <input id="msg" placeholder="Type a message..." />
            <button onclick="send()">Send</button>
          </div>
        </main>
      </div>

      <script src="/socket.io/socket.io.js"></script>
      <script>
        let pageId=null, pageName=null, conversationId=null, recipientPSID=null;

        async function loadPages(){
          const uid=document.getElementById('uid').value.trim();
          if(!uid) return alert('uid missing');
          const r=await fetch('/api/pages?uid='+uid);
          const data=await r.json();
          const el=document.getElementById('pages'); el.innerHTML='';
          (data||[]).forEach(p=>{
            const d=document.createElement('div');
            d.className='item';
            d.textContent=p.name+' ('+p.id+')';
            d.onclick=()=>selectPage(uid,p.id);
            el.appendChild(d);
          });
        }

        async function selectPage(uid, pid){
          const r=await fetch('/api/pages/select',{
            method:'POST', headers:{'Content-Type':'application/json'},
            body:JSON.stringify({ uid, pageId:pid })
          });
          const out=await r.json();
          if(!out.success) return alert('select failed: '+(out.error||''));
          pageId=out.page.id; pageName=out.page.name;
          loadConvos();
        }

        async function loadConvos(){
          const r=await fetch('/api/conversations?pageId='+pageId);
          const data=await r.json();
          const el=document.getElementById('convos'); el.innerHTML='';
          (data||[]).forEach(c=>{
            const d=document.createElement('div');
            d.className='item';
            d.textContent=(c.otherName||'Unknown')+' • '+new Date(c.updated_time).toLocaleString();
            d.onclick=()=>openConvo(c.id,c.otherId,c.otherName);
            el.appendChild(d);
          });
        }

        async function openConvo(cid, otherId, otherName){
          conversationId=cid; recipientPSID=otherId;
          const r=await fetch('/api/messages?conversationId='+cid+'&pageId='+pageId);
          const msgs=await r.json();
          const box=document.getElementById('messages');
          box.innerHTML='<div style="opacity:.8;margin-bottom:6px">'+(otherName||'Conversation')+'</div>';
          msgs.forEach(m=>{
            const b=document.createElement('div');
            b.className='bubble '+(m.from_page?'me':'them');
            b.textContent=(m.text||'[non-text]')+' · '+new Date(m.created_time).toLocaleTimeString();
            box.appendChild(b);
          });
          box.scrollTop=box.scrollHeight;
        }

        async function send(){
          const text=document.getElementById('msg').value.trim();
          if(!text) return;
          const r=await fetch('/api/messages/send',{
            method:'POST', headers:{'Content-Type':'application/json'},
            body:JSON.stringify({ pageId, recipientId:recipientPSID, text })
          });
          const out=await r.json();
          if(!out.success) return alert('send failed: '+(out.error||''));
          document.getElementById('msg').value='';
          if(conversationId) openConvo(conversationId, recipientPSID);
        }

        const socket=io();
        socket.on('messenger_event', evt=>{
          if(evt?.pageId===pageId){
            loadConvos();
            if(conversationId) openConvo(conversationId, recipientPSID);
          }
        });
      </script>
    </body></html>
  `);
});

// ---- API: Pages ----
app.get('/api/pages', async (req, res) => {
  try {
    const uid = String(req.query.uid || '');
    const u = users[uid];
    if (!u) return res.status(404).json({ error: 'user_not_found' });
    res.json(u.pages);
  } catch (e) {
    console.error('/api/pages error:', e.message);
    res.status(500).json({ error: 'internal' });
  }
});

app.post('/api/pages/select', async (req, res) => {
  try {
    const { uid, pageId } = req.body || {};
    const u = users[String(uid)];
    if (!u) return res.status(404).json({ success:false, error: 'user_not_found' });
    const page = (u.pages || []).find(p => p.id === String(pageId));
    if (!page) return res.status(400).json({ success:false, error: 'page_not_in_user_list' });

    u.page = { id: page.id, name: page.name, access_token: page.access_token };

    // Subscribe app to this page's webhooks
    try {
      await axios.post(`https://graph.facebook.com/v23.0/${page.id}/subscribed_apps`, null, {
        params: {
          subscribed_fields: [
            'messages','message_deliveries','messaging_postbacks','messaging_optins','messaging_handovers'
          ].join(','),
          access_token: page.access_token
        }
      });
    } catch (err) {
      console.warn('subscribe warning:', err?.response?.data || err.message);
    }

    res.json({ success:true, page: { id: page.id, name: page.name } });
  } catch (e) {
    console.error('/api/pages/select error:', e.message);
    res.status(500).json({ success:false, error: 'internal' });
  }
});

// ---- API: Conversations ----
app.get('/api/conversations', async (req, res) => {
  try {
    const pageId = String(req.query.pageId || '');
    const pageOwner = Object.values(users).find(u => u.page?.id === pageId);
    if (!pageOwner) return res.status(404).json({ error: 'page_not_selected' });

    const r = await axios.get(`https://graph.facebook.com/v23.0/${pageId}/conversations`, {
      params: {
        fields: 'id,updated_time,participants',
        limit: 50,
        access_token: pageOwner.page.access_token
      }
    });

    const out = (r.data?.data || []).map(conv => {
      const parts = conv.participants?.data || [];
      const other = parts.find(p => p.id !== pageId) || {};
      return {
        id: conv.id,
        updated_time: conv.updated_time,
        otherId: other.id || null,
        otherName: other.name || 'Unknown'
      };
    });

    res.json(out);
  } catch (e) {
    console.error('/api/conversations error:', e?.response?.data || e.message);
    res.status(500).json({ error: 'failed_to_fetch' });
  }
});

// ---- API: Messages (history) ----
app.get('/api/messages', async (req, res) => {
  try {
    const conversationId = String(req.query.conversationId || '');
    const pageId = String(req.query.pageId || '');
    if (!conversationId || !pageId) return res.status(400).json({ error: 'conversationId_and_pageId_required' });

    const pageOwner = Object.values(users).find(u => u.page?.id === pageId);
    if (!pageOwner) return res.status(404).json({ error: 'page_not_selected' });

    const r = await axios.get(`https://graph.facebook.com/v23.0/${conversationId}/messages`, {
      params: {
        fields: 'id,from,to,message,created_time,is_echo',
        limit: 50,
        access_token: pageOwner.page.access_token
      }
    });

    const list = (r.data?.data || []).reverse().map(m => ({
      id: m.id,
      from: m.from?.id,
      to: (m.to?.data || []).map(x=>x.id),
      text: m.message || null,
      created_time: m.created_time,
      is_echo: !!m.is_echo,
      from_page: m.from?.id === pageId
    }));

    res.json(list);
  } catch (e) {
    console.error('/api/messages error:', e?.response?.data || e.message);
    res.status(500).json({ error: 'failed_to_fetch' });
  }
});

// ---- API: Send Message ----
app.post('/api/messages/send', async (req, res) => {
  try {
    const { pageId, recipientId, text } = req.body || {};
    if (!pageId || !recipientId || !text) {
      return res.status(400).json({ success:false, error: 'pageId, recipientId, text required' });
    }
    const pageOwner = Object.values(users).find(u => u.page?.id === String(pageId));
    if (!pageOwner) return res.status(404).json({ success:false, error: 'page_not_selected' });

    const r = await axios.post('https://graph.facebook.com/v23.0/me/messages', {
      recipient: { id: recipientId },
      message: { text }
    }, {
      params: { access_token: pageOwner.page.access_token },
      headers: { 'Content-Type': 'application/json' },
      timeout: 20000
    });

    res.json({ success:true, id: r.data?.message_id || null });
  } catch (e) {
    console.error('/api/messages/send error:', e?.response?.data || e.message);
    res.status(e?.response?.status || 500).json({ success:false, error: e?.response?.data?.error?.message || 'send_failed' });
  }
});

// ---- Webhook (verify + receive) ----
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  if (mode === 'subscribe' && token === CFG.WEBHOOK_VERIFY_TOKEN) {
    return res.status(200).send(challenge);
  }
  return res.sendStatus(403);
});

app.post('/webhook', (req, res) => {
  try {
    const body = req.body;
    if (body.object === 'page') {
      body.entry?.forEach(entry => {
        const pageId = entry.id;
        entry.messaging?.forEach(evt => {
          io.emit('messenger_event', { pageId, evt, type: 'message' });

          // ---- Optional: simple autoresponder ----
          // if (evt.message && evt.message.text) {
          //   const text = evt.message.text;
          //   const pageOwner = Object.values(users).find(u => u.page?.id === String(pageId));
          //   if (pageOwner) {
          //     axios.post('https://graph.facebook.com/v23.0/me/messages', {
          //       recipient: { id: evt.sender.id },
          //       message: { text: `Auto-reply: you said "${text}"` }
          //     }, { params: { access_token: pageOwner.page.access_token }}).catch(()=>{});
          //   }
          // }
        });
      });
      return res.sendStatus(200);
    }
    return res.sendStatus(404);
  } catch (e) {
    console.error('webhook error:', e.message);
    return res.sendStatus(500);
  }
});

// ---- Base routes ----
app.get('/', (_req, res) => {
  res.send(`<a href="/auth/facebook">Login with Facebook</a>`);
});

// ---- Socket.IO ----
io.on('connection', (socket) => {
  console.log('Socket connected');
  socket.on('disconnect', () => console.log('Socket disconnected'));
});

// ---- Start ----
server.listen(CFG.PORT, () => {
  console.log(`Server on :${CFG.PORT}`);
  console.log(`Callback: ${CFG.FB_CALLBACK}`);
});
